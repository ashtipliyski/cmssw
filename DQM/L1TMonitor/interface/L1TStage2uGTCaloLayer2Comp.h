#ifndef DQM_L1TMonitor_L1TStage2uGTCaloLayer2Comp
#define DQM_L1TMonitor_L1TStage2uGTCaloLayer2Comp

#include "FWCore/Framework/interface/MakerMacros.h"

#include "DQMServices/Core/interface/DQMEDAnalyzer.h"
#include "DQMServices/Core/interface/MonitorElement.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "DataFormats/L1Trigger/interface/EGamma.h"
#include "DataFormats/L1Trigger/interface/Jet.h"
#include "DataFormats/L1Trigger/interface/EtSum.h"
#include "DataFormats/L1Trigger/interface/Tau.h"

/**
 * Short class description.
 *
 * Longer class description...
 * ... desc continued.
 */
class L1TStage2uGTCaloLayer2Comp : public DQMEDAnalyzer {

 public:
  /**
   * Class constructor
   *
   * Receives the set of parameters, specified by the python configuration file
   * used to initialise the module as a part of a sequence. The contents of the
   * set is used to configure the internal state of the objects of this class.
   * Values from the parameter set are extracted and used to initialise
   * bxcollections for jet, e/g, tau and sum objects reconstructed by firmware
   * (data) and emulator. These collections are the basis of the comparisons
   * performed by this module.
   *
   * @param edm::ParamterSet & ps A pointer to the parameter set used
   */
  L1TStage2uGTCaloLayer2Comp (const edm::ParameterSet & ps);


 protected:

  /**
   * Method to declare or "book" all histograms that will be part of module
   *
   * Histograms that are to be visualised as part of the DQM module should be
   * registered with the IBooker object any additional configuration such as
   * title or axis labels and ranges. A good rule of thumb for the amount of
   * configuration is that it should be possible to understnand the contents of
   * the histogram using the configuration received from this method since the
   * plots generated by this module would later be stored into ROOT files for
   * transfer to the DQM system and it should be possible to ...
   *
   * @param DQMStore::IBooker& ibooker Object that handles the creation of plots
   * @param edm::Run const &           Reference to run object
   * @param edm::EventSetup const &    Reference to event configuration object
   *
   * @return void
   */
  void bookHistograms (DQMStore::IBooker&,
			       const edm::Run&,
			       const edm::EventSetup&) override;

  /**
   * Main method where the analysis code resides, executed once for each run
   *
   * The main body of the module code is contained in this method. The different
   * object collections are extracted from the run and are passed to the
   * respective comparison methods for processing of each object type.
   *
   * @param edm::Event const &         Reference to event object
   * @param edm::EventSetup const &    Reference to event configuration object
   *
   * @return void
   */
  void analyze (const edm::Event&, const edm::EventSetup&) override;

 private:

  /**
   * Encapsulates the code required for performing a comparison of
   * the jets contained in a given event.
   *
   * Method is called once per each event with the jet collections associated
   * with the event being extracted for bx = 0 as the RAW information required
   * to run the emulator is only available for bx 0. The implementation checks
   * if the size of collections is the same and when so, compares the jets in
   * the same positions within the data/emul collections. When a discrepancy is
   * found, the properties (Et, eta, phi) of the problematic data/emul objects
   * are stored in dedicated histograms. In cases of differences, a distinction
   * is made between objects whose energy or position are in disagremeent.When
   * the length of data/emul collections is different, all of the objects are
   * "stored" in the histograms dedicated to problematic objects.
   *
   * @param edm::Handle<l1t::JetBXCollection>& calol2Col Reference to jet
   *    collection from data
   * @param edm::Handle<l1t::JetBXCollection>& uGTCol Reference to jet
   *    collection from emulation
   *
   * @return bool Flag of whether the agreement was perfect
   */
  bool compareJets(const edm::Handle<l1t::JetBxCollection> & calol2Col,
                   const edm::Handle<l1t::JetBxCollection> & uGTCol);

  /**
   * Encapsulates the code required for performing a comparison of
   * the e/gs contained in a given event.
   *
   * Method is called once per each event with the e/g collections associated
   * with the event being extracted for bx = 0 as the RAW information required
   * to run the emulator is only available for bx 0. The implementation checks
   * if the size of collections is the same and when so, compares the e/gs in
   * the same positions within the data/emul collections. When a discrepancy is
   * found, the properties (Et, eta, phi) of the problematic data/emul objects
   * are stored in dedicated histograms. In cases of differences, a distinction
   * is made between objects whose energy or position are in disagremeent.
   * Another distinction is made between isolated and non-isolated e/g
   * candidates and problematic objects are handled accordingly. When the length
   * of data/emul collections is different, all of the objects are "stored" in
   * the histograms dedicated to problematic objects.
   *
   * @param edm::Handle<l1t::EGammaBXCollection>& calol2Col Reference to e/gamma
   *    collection from data
   * @param edm::Handle<l1t::EGammaBXCollection>& uGTCol Reference to e/gamma
   *    collection from emulation
   *
   * @return bool Flag of whether the agreement was perfect
   */
  bool compareEGs(const edm::Handle<l1t::EGammaBxCollection> & calol2Col,
                  const edm::Handle<l1t::EGammaBxCollection> & uGTCol);

  /**
   * Encapsulates the code required for performing a comparison of
   * the taus contained in a given event.
   *
   * Method is called once per each event with the tau collections associated
   * with the event being extracted for bx = 0 as the RAW information required
   * to run the emulator is only available for bx 0. The implementation checks
   * if the size of collections is the same and when so, compares the taus in
   * the same positions within the data/emul collections. When a discrepancy is
   * found, the properties (Et, eta, phi) of the problematic data/emul objects
   * are stored in dedicated histograms. In cases of differences, a distinction
   * is made between objects whose energy or position are in disagremeent.
   * Another distinction is made between isolated and non-isolated tau
   * candidates and problematic objects are handled accordingly. When the length
   * of data/emul collections is different, all of the objects are "stored" in
   * the histograms dedicated to problematic objects.
   *
   * @param edm::Handle<l1t::TauBXCollection>& calol2Col Reference to tau
   *    collection from data
   * @param edm::Handle<l1t::TauBXCollection>& uGTCol Reference to tau
   *    collection from emulation
   *
   * @return bool Flag of whether the agreement was perfect
   */
  bool compareTaus(const edm::Handle<l1t::TauBxCollection> & calol2Col,
                   const edm::Handle<l1t::TauBxCollection> & uGTCol);

  /**
   * Encapsulates the code required for performing a comparison of
   * the taus contained in a given event.
   *
   * Method is called once per each event with the sum collections associated
   * with the event being extracted for bx = 0 as the RAW information required
   * to run the emulator is only available for bx 0. The implementation loops
   * over the collection and depending of the sum type, each variant is compared
   * independently. If any disagreement is found, the event is marked a bad and
   * the properties of the sum are stored in the data/emulator problematic
   * histograms.
   *
   * @param edm::Handle<l1t::TauBXCollection>& calol2Col Reference to tau
   *    collection from data
   * @param edm::Handle<l1t::TauBXCollection>& uGTCol Reference to tau
   *    collection from emulation
   *
   * @return bool Flag of whether the agreement was perfect
   */
  bool compareSums(const edm::Handle<l1t::EtSumBxCollection> & calol2Col,
                   const edm::Handle<l1t::EtSumBxCollection> & uGTCol);

  // Holds the name of directory in DQM where module hostograms will be shown.
  // Value is taken from python configuration file (passed in class constructor)
  std::string monitorDir;

  // collections to hold entities reconstructed from data and emulation
  edm::EDGetTokenT<l1t::JetBxCollection> calol2JetCollection;
  edm::EDGetTokenT<l1t::JetBxCollection> uGTJetCollection;
  edm::EDGetTokenT<l1t::EGammaBxCollection> calol2EGammaCollection;
  edm::EDGetTokenT<l1t::EGammaBxCollection> uGTEGammaCollection;
  edm::EDGetTokenT<l1t::TauBxCollection> calol2TauCollection;
  edm::EDGetTokenT<l1t::TauBxCollection> uGTTauCollection;
  edm::EDGetTokenT<l1t::EtSumBxCollection> calol2EtSumCollection;
  edm::EDGetTokenT<l1t::EtSumBxCollection> uGTEtSumCollection;

  enum numeratorBins {
    EVENTBAD = 1,
    EVENTBADJETCOL,
    EVENTBADEGCOL,
    EVENTBADTAUCOL,
    EVENTBADSUMCOL,
    JETBADET,
    JETBADETA,
    JETBADPHI,
    EGBADET,
    EGBADPHI,
    EGBADETA,
    TAUBADET,
    TAUBADPHI,
    TAUBADETA,
    BADSUM
  };

  enum denumBins {
    EVENTS1 = 1,
    EVENTS2,
    EVENTS3,
    EVENTS4,
    EVENTS5,
    JETS1,
    JETS2,
    JETS3,
    EGS1,
    EGS2,
    EGS3,
    TAUS1,
    TAUS2,
    TAUS3,
    SUMS
  };

  // objects to represent individual plots shown in DQM
  MonitorElement * comparisonNum;
  MonitorElement * comparisonDenum;
  bool verbose;

  // use only bx = 0 since it only contains RAW data (needed for emulator)
  const unsigned int currBx = 0;
};

#endif
